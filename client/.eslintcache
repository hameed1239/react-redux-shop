[{"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\index.js":"1","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\serviceWorker.js":"2","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\App.js":"3","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\pages\\Home.js":"4","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\pages\\NoMatch.js":"5","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\pages\\Detail.js":"6","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\pages\\Login.js":"7","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\pages\\OrderHistory.js":"8","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\pages\\Success.js":"9","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\pages\\Signup.js":"10","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\utils\\store.js":"11","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\components\\Nav\\index.js":"12","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\utils\\queries.js":"13","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\utils\\actions.js":"14","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\utils\\GlobalState.js":"15","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\utils\\mutations.js":"16","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\utils\\helpers.js":"17","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\utils\\auth.js":"18","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\utils\\reducers.js":"19","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\components\\Cart\\index.js":"20","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\components\\ProductList\\index.js":"21","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\components\\CategoryMenu\\index.js":"22","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\components\\Jumbotron\\index.js":"23","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\features\\products\\productSlice.js":"24","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\components\\CartItem\\index.js":"25","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\components\\ProductItem\\index.js":"26"},{"size":644,"mtime":1611186558469,"results":"27","hashOfConfig":"28"},{"size":5141,"mtime":499162500000,"results":"29","hashOfConfig":"28"},{"size":1636,"mtime":1611186513199,"results":"30","hashOfConfig":"28"},{"size":358,"mtime":1610221283721,"results":"31","hashOfConfig":"28"},{"size":390,"mtime":1610051994031,"results":"32","hashOfConfig":"28"},{"size":3778,"mtime":1611180733806,"results":"33","hashOfConfig":"28"},{"size":2055,"mtime":1611185233268,"results":"34","hashOfConfig":"28"},{"size":1510,"mtime":1610051994031,"results":"35","hashOfConfig":"28"},{"size":1325,"mtime":1610234360815,"results":"36","hashOfConfig":"28"},{"size":2530,"mtime":1611181188694,"results":"37","hashOfConfig":"28"},{"size":340,"mtime":1610407149630,"results":"38","hashOfConfig":"28"},{"size":1338,"mtime":1610051994028,"results":"39","hashOfConfig":"28"},{"size":974,"mtime":1610234360816,"results":"40","hashOfConfig":"28"},{"size":473,"mtime":1610221283722,"results":"41","hashOfConfig":"28"},{"size":737,"mtime":1610404427023,"results":"42","hashOfConfig":"28"},{"size":815,"mtime":1610051994034,"results":"43","hashOfConfig":"28"},{"size":2272,"mtime":1611179489457,"results":"44","hashOfConfig":"28"},{"size":1060,"mtime":1610051994033,"results":"45","hashOfConfig":"28"},{"size":309,"mtime":1611180708261,"results":"46","hashOfConfig":"28"},{"size":3833,"mtime":1611180012352,"results":"47","hashOfConfig":"28"},{"size":2682,"mtime":1610403304885,"results":"48","hashOfConfig":"28"},{"size":2004,"mtime":1610405650621,"results":"49","hashOfConfig":"28"},{"size":247,"mtime":1610051994027,"results":"50","hashOfConfig":"28"},{"size":3188,"mtime":1610407773822,"results":"51","hashOfConfig":"28"},{"size":2094,"mtime":1610408468094,"results":"52","hashOfConfig":"28"},{"size":1813,"mtime":1611179972346,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1tb0pde",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\index.js",[],["114","115"],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\serviceWorker.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\App.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\pages\\Home.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\pages\\NoMatch.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\pages\\Detail.js",["116"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\r\nimport spinner from '../assets/spinner.gif';\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY, UPDATE_PRODUCTS, ADD_TO_CART } from \"../utils/actions\"\r\nimport Cart from '../components/Cart';\r\nimport { idbPromise } from \"../utils/helpers\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst selectProducts = state => state.products;\r\nconst selectCart = state => state.cart;\r\n\r\nfunction Detail() {\r\n  const dispatch = useDispatch();\r\n  const products = useSelector(selectProducts)\r\n  const cart = useSelector(selectCart)\r\n\r\n  const { id } = useParams();\r\n\r\n  const [currentProduct, setCurrentProduct] = useState({})\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  // const { products, cart } = state;\r\n\r\n  useEffect(() => {\r\n    if (products.length) {\r\n      setCurrentProduct(products.find(product => product._id === id));\r\n    }\r\n    else if (data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products\r\n      });\r\n\r\n      data.products.forEach((product) => {\r\n        idbPromise(\"products\", \"put\", product)\r\n      })\r\n    }\r\n    // get cache from idb\r\n    else if (!loading) {\r\n      idbPromise('products', 'get').then((indexedProducts) => {\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: indexedProducts\r\n        });\r\n      });\r\n    }\r\n  }, [products, data, loading, dispatch, id]);\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\r\n\r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...currentProduct, purchaseQuantity: 1 }\r\n      });\r\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\r\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\r\n    }\r\n  }\r\n  const removeFromCart = () => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: currentProduct._id\r\n    });\r\n\r\n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\r\n    idbPromise('cart', 'delete', { ...currentProduct });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {currentProduct ? (\r\n        <div className=\"container my-1\">\r\n          <Link to=\"/\">\r\n            ← Back to Products\r\n          </Link>\r\n\r\n          <h2>{currentProduct.name}</h2>\r\n\r\n          <p>\r\n            {currentProduct.description}\r\n          </p>\r\n\r\n          <p>\r\n            <strong>Price:</strong>\r\n            ${currentProduct.price}\r\n            {\" \"}\r\n            <button onClick = {addToCart}>\r\n              Add to Cart\r\n            </button>\r\n            <button\r\n              disabled={!cart.find(p => p._id === currentProduct._id)}\r\n              onClick={removeFromCart}\r\n            >\r\n              Remove from Cart\r\n</button>\r\n          </p>\r\n\r\n          <img\r\n            src={`/images/${currentProduct.image}`}\r\n            alt={currentProduct.name}\r\n          />\r\n        </div>\r\n      ) : null}\r\n      {\r\n        loading ? <img src={spinner} alt=\"loading\" /> : null\r\n      }\r\n      <Cart/>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Detail;\r\n","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\pages\\Login.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\pages\\OrderHistory.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\pages\\Success.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\pages\\Signup.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\utils\\store.js",["117"],"import { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\nimport { idbPromise } from \"./helpers\"\r\n\r\nlet preloadedState = {\r\n  cart: getCart\r\n}\r\nasync function getCart() {\r\n  const persistedState = await idbPromise(\"cart\", \"get\")\r\n  return persistedState\r\n}\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\components\\Nav\\index.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\utils\\queries.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\utils\\actions.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\utils\\GlobalState.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\utils\\mutations.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\utils\\helpers.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\utils\\auth.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\utils\\reducers.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\components\\Cart\\index.js",["118"],"import React, { useEffect } from \"react\";\r\nimport CartItem from '../CartItem';\r\nimport Auth from '../../utils/auth';\r\nimport './style.css';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport { QUERY_CHECKOUT } from '../../utils/queries';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { useLazyQuery } from '@apollo/react-hooks';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\r\nconst selectCart = state => state.cart;\r\nconst selectCartOpen = state => state.cartOpen;\r\n\r\nconst Cart = () => {\r\n    const cart = useSelector(selectCart)\r\n    const cartOpen = useSelector(selectCartOpen)\r\n    const dispatch = useDispatch();\r\n    // const [state, dispatch] = useStoreContext();\r\n    const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\r\n\r\n    useEffect(() => {\r\n        async function getCart() {\r\n            const cart = await idbPromise('cart', 'get');\r\n            dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\r\n        };\r\n\r\n        if (!cart.length) {\r\n            getCart();\r\n        }\r\n    }, [cart.length, dispatch]);\r\n\r\n    // console.log(state)\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            stripePromise.then((res) => {\r\n                res.redirectToCheckout({ sessionId: data.checkout.session });\r\n            });\r\n        }\r\n    }, [data]);\r\n\r\n    function toggleCart() {\r\n        dispatch({ type: TOGGLE_CART });\r\n    }\r\n    function calculateTotal() {\r\n        let sum = 0;\r\n        cart.forEach(item => {\r\n            sum += item.price * item.purchaseQuantity;\r\n        });\r\n        return sum.toFixed(2);\r\n        // function submitCheckout() {\r\n        //     const productIds = [];\r\n\r\n        //     cart.forEach((item) => {\r\n        //         for (let i = 0; i < item.purchaseQuantity; i++) {\r\n        //             productIds.push(item._id);\r\n        //         }\r\n        //     });\r\n        // }\r\n    }\r\n    function submitCheckout() {\r\n        const productIds = [];\r\n\r\n        cart.forEach((item) => {\r\n            for (let i = 0; i < item.purchaseQuantity; i++) {\r\n                productIds.push(item._id);\r\n            }\r\n        });\r\n        getCheckout({\r\n            variables: { products: productIds }\r\n        });\r\n    }\r\n    if (!cartOpen) {\r\n        return (\r\n            <div className=\"cart-closed\" onClick={toggleCart}>\r\n                <span\r\n                    role=\"img\"\r\n                    aria-label=\"trash\">🛒</span>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"cart\">\r\n            <div className=\"close\" onClick={toggleCart}>[close]</div>\r\n            <h2>Shopping Cart</h2>\r\n            {cart.length ? (\r\n                <div>\r\n                    {cart.map(item => (\r\n                        <CartItem key={item._id} item={item} />\r\n                    ))}\r\n                    <div className=\"flex-row space-between\">\r\n                        <strong>Total: ${calculateTotal()}</strong>\r\n                        {\r\n                            Auth.loggedIn() ?\r\n                                <button onClick={submitCheckout}>\r\n                                    Checkout\r\n</button>\r\n                                :\r\n                                <span>(log in to check out)</span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                    <h3>\r\n                        <span role=\"img\" aria-label=\"shocked\">\r\n                            😱\r\n      </span>\r\n      You haven't added anything to your cart yet!\r\n                    </h3>\r\n                )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cart;","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\components\\ProductList\\index.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\components\\CategoryMenu\\index.js",["119"],"import { useQuery } from '@apollo/react-hooks';\r\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport React, { useEffect } from 'react';\r\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\r\nimport { idbPromise } from '../../utils/helpers';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst selectCategories = state => state.categories;\r\n\r\n\r\nfunction CategoryMenu() {\r\n\r\n  const categories = useSelector(selectCategories)\r\n  const dispatch = useDispatch();\r\n  // const [state, dispatch] = useStoreContext();\r\n\r\n  // const { categories } = state;\r\n\r\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n\r\n  useEffect(() => {\r\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\r\n    if (categoryData) {\r\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\r\n      dispatch({\r\n        type: UPDATE_CATEGORIES,\r\n        categories: categoryData.categories\r\n      });\r\n\r\n      //add categories to indexDB too\r\n      categoryData.categories.forEach(category => {\r\n        idbPromise('categories', 'put', category);\r\n      });\r\n    }\r\n    else if (!loading) {\r\n      idbPromise('categories', 'get').then(categories => {\r\n        dispatch({\r\n          type: UPDATE_CATEGORIES,\r\n          categories: categories\r\n        });\r\n      });\r\n    }\r\n  }, [categoryData, loading, dispatch]);\r\n\r\n  const handleClick = id => {\r\n    dispatch({\r\n      type: UPDATE_CURRENT_CATEGORY,\r\n      currentCategory: id\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Choose a Category:</h2>\r\n      {categories.map(item => (\r\n        <button\r\n          key={item._id}\r\n          onClick={() => {\r\n            handleClick(item._id);\r\n          }}\r\n        >\r\n          {item.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoryMenu;\r\n","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\components\\Jumbotron\\index.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\features\\products\\productSlice.js",[],"C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\components\\CartItem\\index.js",["120","121"],"import React from 'react';\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { UPDATE_CART_QUANTITY, REMOVE_FROM_CART } from \"../../utils/actions\"\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n\r\nconst CartItem = ({ item }) => {\r\n    \r\n    const dispatch = useDispatch();\r\n    // const [, dispatch] = useStoreContext();\r\n\r\n    const removeFromCart = item => {\r\n        dispatch({\r\n            type: REMOVE_FROM_CART,\r\n            _id: item._id\r\n        });\r\n        idbPromise('cart', 'delete', { ...item });\r\n    };\r\n\r\n    const onChange = (e) => {\r\n        const value = e.target.value;\r\n\r\n        if (value === '0') {\r\n            dispatch({\r\n                type: REMOVE_FROM_CART,\r\n                _id: item._id\r\n            });\r\n\r\n            idbPromise('cart', 'delete', { ...item });\r\n        } else {\r\n            dispatch({\r\n                type: UPDATE_CART_QUANTITY,\r\n                _id: item._id,\r\n                purchaseQuantity: parseInt(value)\r\n            });\r\n\r\n            idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"flex-row\">\r\n            <div>\r\n                <img\r\n                    src={`/images/${item.image}`}\r\n                    alt=\"\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <div>{item.name}, ${item.price}</div>\r\n                <div>\r\n                    <span>Qty:</span>\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"1\"\r\n                        value={item.purchaseQuantity}\r\n                        onChange={onChange}\r\n                    />\r\n                    <span\r\n                        role=\"img\"\r\n                        aria-label=\"trash\"\r\n                        onClick={() => { removeFromCart(item) }}\r\n                    >\r\n                        🗑️\r\n          </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CartItem;","C:\\Users\\Owner\\Documents\\softwareDev\\react-redux-shop\\client\\src\\components\\ProductItem\\index.js",["122"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { pluralize } from \"../../utils/helpers\";\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n\r\nconst selectCart = state => state.cart;\r\n// const selectCurrentCategory = state => state.currentCategory;\r\nfunction ProductItem(item) {\r\n  const {\r\n    image,\r\n    name,\r\n    _id,\r\n    price,\r\n    quantity\r\n  } = item;\r\n\r\n  const dispatch = useDispatch();\r\n  const cart = useSelector(selectCart)\r\n\r\n  // const [state, dispatch] = useStoreContext();\r\n  // const { cart } = state;\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: _id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...item, purchaseQuantity: 1 }\r\n      });\r\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"card px-1 py-1\">\r\n      <Link to={`/products/${_id}`}>\r\n        <img\r\n          alt={name}\r\n          src={`/images/${image}`}\r\n        />\r\n        <p>{name}</p>\r\n      </Link>\r\n      <div>\r\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\r\n        <span>${price}</span>\r\n      </div>\r\n      <button onClick={addToCart}>Add to cart</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductItem;\r\n",["123","124"],{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":7,"column":10,"nodeType":"131","messageId":"132","endLine":7,"endColumn":25},{"ruleId":"129","severity":1,"message":"133","line":5,"column":5,"nodeType":"131","messageId":"132","endLine":5,"endColumn":19},{"ruleId":"129","severity":1,"message":"130","line":5,"column":10,"nodeType":"131","messageId":"132","endLine":5,"endColumn":25},{"ruleId":"129","severity":1,"message":"130","line":3,"column":10,"nodeType":"131","messageId":"132","endLine":3,"endColumn":25},{"ruleId":"129","severity":1,"message":"130","line":2,"column":10,"nodeType":"131","messageId":"132","endLine":2,"endColumn":25},{"ruleId":"129","severity":1,"message":"134","line":5,"column":10,"nodeType":"131","messageId":"132","endLine":5,"endColumn":21},{"ruleId":"129","severity":1,"message":"130","line":4,"column":10,"nodeType":"131","messageId":"132","endLine":4,"endColumn":25},{"ruleId":"125","replacedBy":"135"},{"ruleId":"127","replacedBy":"136"},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'useStoreContext' is defined but never used.","Identifier","unusedVar","'preloadedState' is assigned a value but never used.","'useSelector' is defined but never used.",["137"],["138"],"no-global-assign","no-unsafe-negation"]